// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider      = "prisma-client-js"
    output        = "../src/generated/prisma"
    binaryTargets = ["native", "rhel-openssl-3.0.x", "darwin-arm64"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    ADMIN
    CONSULTANT
    MEMBER
}

enum TaskType {
    LIQUIDATION
    ACQUISITION
    AUTHORIZATION
    ARBITRAGE
    VAULT
}

enum TaskState {
    STORED
    EXECUTED
    BLOCKED
    CANCELLED
}

enum ProofType {
    TEXT
    IMAGE
}

enum ProofStatus {
    PENDING
    VERIFIED
    REJECTED
}

model User {
    id        Int      @id @default(autoincrement())
    email     String?
    nickname  String? @unique
    address   String
    role      Role     @default(MEMBER)
    createdAt DateTime @default(now())
    tasks     Task[]   @relation("UserTasks")
    proofs    TaskExecutionProof[] @relation("UserProofs")
}

model Task {
    id                    String   @id @default(cuid())
    transactionId         String   @unique // Transaction ID original
    taskType              TaskType 
    state                 TaskState @default(STORED)
    // Data de la task (original)
    taskData              Json     // JSON completo de la task
    
    // Hashes de seguridad
    taskHash              String   @unique // Hash de la task (keccak256)
    transactionHash       String            // Hash de la tx en chain (puede ser compartido en batch)
    
    // Campos comunes a todos los tipos
    tokenType             String?
    chain                 String?
    platform              String?
    typeOfTx              String?
    details               String?
    
    // Campos específicos de LIQUIDATION (A-M)
    companyAndArtist      String?
    collectionName        String?
    tokenId               String?
    tokenLink             String?
    targetPriceEth        String?
    dateDeadline          String?
    technicalVerification String?
    
    // Campos específicos de ACQUISITION (A-M)
    nftName               String?
    targetPriceBudget     String?
    transactionExecutionDate String?
    priorityDeadline      String?
    
    // Campos específicos de ARBITRAGE (A-L)
    targetPricePerToken   String?
    amount                String?
    currencyName          String?
    proportion            String?
    duration              String?
    deadline              String?
    
    // Campos comunes adicionales
    priority              String?
    
    // Relaciones
    userId                Int?
    user                  User?    @relation("UserTasks", fields: [userId], references: [id])
    executionProofs       TaskExecutionProof[] @relation("TaskExecutionProofs")
    
    createdAt             DateTime @default(now())
    updatedAt             DateTime @updatedAt
}

model TaskExecutionProof {
    id        String   @id @default(cuid())
    taskId    String
    task      Task     @relation("TaskExecutionProofs", fields: [taskId], references: [id])
    proofType ProofType @default(TEXT)
    
    proofValue       String? 
    fileName         String? 
    fileSize         Int?    
    mimeType         String? 
    
    uploadedBy       Int?
    uploadedByUser   User?    @relation("UserProofs", fields: [uploadedBy], references: [id])
    
    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt
}
